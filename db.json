{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/phantom/source/about.html","path":"about.html","modified":0,"renderable":1},{"_id":"source/images/secondPost.jpg","path":"images/secondPost.jpg","modified":0,"renderable":0},{"_id":"source/images/firstPost.jpg","path":"images/firstPost.jpg","modified":0,"renderable":0},{"_id":"source/images/april.jpg","path":"images/april.jpg","modified":0,"renderable":0},{"_id":"themes/phantom/source/css/ie8.css","path":"css/ie8.css","modified":0,"renderable":1},{"_id":"themes/phantom/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/phantom/source/css/ie9.css","path":"css/ie9.css","modified":0,"renderable":1},{"_id":"themes/phantom/source/css/main.css","path":"css/main.css","modified":0,"renderable":1},{"_id":"themes/phantom/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/phantom/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/phantom/source/js/skel.min.js","path":"js/skel.min.js","modified":0,"renderable":1},{"_id":"themes/phantom/source/js/util.js","path":"js/util.js","modified":0,"renderable":1},{"_id":"themes/phantom/source/sass/ie8.scss","path":"sass/ie8.scss","modified":0,"renderable":1},{"_id":"themes/phantom/source/sass/font-awesome.min.css","path":"sass/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/phantom/source/sass/ie9.scss","path":"sass/ie9.scss","modified":0,"renderable":1},{"_id":"themes/phantom/source/sass/main.scss","path":"sass/main.scss","modified":0,"renderable":1},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/phantom/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/phantom/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/phantom/source/js/ie/html5shiv.js","path":"js/ie/html5shiv.js","modified":0,"renderable":1},{"_id":"themes/phantom/source/js/ie/respond.min.js","path":"js/ie/respond.min.js","modified":0,"renderable":1},{"_id":"source/2016/12/22/images/vr.jpg","path":"2016/12/22/images/vr.jpg","modified":0,"renderable":0},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/2016/12/22/images/vr.png","path":"2016/12/22/images/vr.png","modified":0,"renderable":0},{"_id":"source/images/luca-bravo-small.jpg","path":"images/luca-bravo-small.jpg","modified":0,"renderable":0},{"_id":"source/images/sweet-ice-cream-photography-151847.jpg","path":"images/sweet-ice-cream-photography-151847.jpg","modified":0,"renderable":0},{"_id":"source/images/luca-bravo-415109.jpg","path":"images/luca-bravo-415109.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/2ndPost.md","hash":"90b3d602a2d1bb7c9aa0755bd40ea4e1fedfe3ff","modified":1512244012280},{"_id":"source/_posts/First-Post.md","hash":"75c2571e2f479cd420c04c8abe5ca2f2b805d8fa","modified":1512244012280},{"_id":"source/_posts/april2017.md","hash":"1dee41ccf6becb943533f1865aadf30aec15e0d6","modified":1512244012281},{"_id":"source/_posts/feb-2018.md","hash":"a23e2643016fdac63e2c225a4c0b27597b699229","modified":1517720664376},{"_id":"themes/phantom/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1512244012306},{"_id":"themes/phantom/README.md","hash":"44d2145a91a2058f37ed65a0334c948cdc8c30ec","modified":1512244012305},{"_id":"themes/phantom/_config.yml","hash":"af0a3e1b2803d57732d375857a12575c5bed87aa","modified":1512244012305},{"_id":"themes/phantom/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1512244012305},{"_id":"themes/phantom/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1512244012306},{"_id":"themes/phantom/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1512244012306},{"_id":"themes/phantom/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1512244012306},{"_id":"themes/phantom/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1512244012306},{"_id":"themes/phantom/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1512244012306},{"_id":"themes/phantom/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1512244012306},{"_id":"themes/phantom/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1512244012306},{"_id":"themes/phantom/layout/page.ejs","hash":"54f11f374dd0903086bd5bf7db507908034a8f28","modified":1512244012309},{"_id":"themes/phantom/layout/archive.ejs","hash":"7ab1832ba8a8156a61896e9b618b084771e77124","modified":1512244012309},{"_id":"themes/phantom/layout/layout.ejs","hash":"1cc5d0e68150966bf19e149c5bca86d5d741aebb","modified":1512244012309},{"_id":"themes/phantom/layout/index.ejs","hash":"09022447f0047ca04e14c27e8cdccc763131e9ad","modified":1512244012309},{"_id":"themes/phantom/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1512244012309},{"_id":"themes/phantom/source/about.html","hash":"4afb971299df807287b003d0e8ce71bfcbd6406d","modified":1512244012309},{"_id":"source/images/secondPost.jpg","hash":"2f0bad4bad5c8b65574a2c76e92854ded3deee99","modified":1512244012283},{"_id":"themes/phantom/layout/_partial/article-archive.ejs","hash":"a59de36284b5fa1d1ae173ff69a08e20250b29d0","modified":1512244012307},{"_id":"themes/phantom/layout/_partial/after-footer.ejs","hash":"f3c32cb093d8230bba950b08fe6d44a84feb1366","modified":1512244012307},{"_id":"source/images/firstPost.jpg","hash":"57f68598e07ab2a935960aeffc35f0a0c79d676f","modified":1512244012282},{"_id":"source/images/april.jpg","hash":"634308ad74061ea2534ad199c88211f47813a5bd","modified":1512244012281},{"_id":"themes/phantom/layout/_partial/article-full.ejs","hash":"b77037cf191fcdcdc01b14c4ac4e0cb73c9bd1f3","modified":1512244012307},{"_id":"themes/phantom/layout/_partial/article-index.ejs","hash":"cccb2218f48dfbeef82da6d3417d56c1a1291c60","modified":1512244012307},{"_id":"themes/phantom/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1512244012308},{"_id":"themes/phantom/layout/_partial/footer.ejs","hash":"825bc8c3608a89bdc03b54ad776bdd055e3962c7","modified":1512244012308},{"_id":"themes/phantom/layout/_partial/article-page.ejs","hash":"56bbf11584b920213a9ca811424400cdd767ebf9","modified":1512244012307},{"_id":"themes/phantom/layout/_partial/article-tags.ejs","hash":"df2a96bad2f411ba2a8216721fc2996fa79bc58b","modified":1512244012307},{"_id":"themes/phantom/layout/_partial/head.ejs","hash":"8b4a1409c632c576b7ba7343ea8c653fec355354","modified":1512244012308},{"_id":"themes/phantom/layout/_partial/gallery.ejs","hash":"80c3758b90fe6c197b52602456e2c4dcf7167847","modified":1512244012308},{"_id":"themes/phantom/layout/_partial/menu.ejs","hash":"1e08ad924dc7c68acc2ff563114d8e8756abf8e3","modified":1512244012308},{"_id":"themes/phantom/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1512244012308},{"_id":"themes/phantom/layout/_partial/pagination.ejs","hash":"e093a501c62b8ac7587d6b684f39362955c83490","modified":1512244012309},{"_id":"themes/phantom/source/css/ie8.css","hash":"4f41720ed7a2d4831d248aa591b573383f22263a","modified":1512244012310},{"_id":"themes/phantom/source/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1512244012310},{"_id":"themes/phantom/source/css/ie9.css","hash":"1dad1d8872d9d5c8d7013d9e2327c7ce947c5951","modified":1512244012311},{"_id":"themes/phantom/source/css/main.css","hash":"47ce4af611e7fd8908b45a2cbc7c6232a4092cc2","modified":1512244012311},{"_id":"themes/phantom/source/images/logo.svg","hash":"6de70d5f1da267250a06423e1fa9c32c0f61b3ed","modified":1512244012314},{"_id":"themes/phantom/source/js/main.js","hash":"373d6a6b66b774cd548c36ea65f43fe9986a2fec","modified":1512244012316},{"_id":"themes/phantom/source/js/skel.min.js","hash":"14f390065fddc652ca1717aaebf5b44f8de78f9d","modified":1512244012316},{"_id":"themes/phantom/source/js/util.js","hash":"3ece9010adc07dd3dc27ced0e22e7ac8bcd16e14","modified":1512244012316},{"_id":"themes/phantom/source/sass/ie8.scss","hash":"0119f291fb39e5910a2a663f6fd8ef16f914d4f0","modified":1512244012319},{"_id":"themes/phantom/source/sass/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1512244012319},{"_id":"themes/phantom/source/sass/ie9.scss","hash":"ead318fa43632d5f6756e59e4c91fc57bfffa8df","modified":1512244012319},{"_id":"themes/phantom/source/sass/main.scss","hash":"6ce52c347980c1bd1ccf429656fd61225112fe7f","modified":1512244012321},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1512244012312},{"_id":"themes/phantom/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1512244012312},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1512244012314},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1512244012314},{"_id":"themes/phantom/source/js/jquery.min.js","hash":"276c87ff3e1e3155679c318938e74e5c1b76d809","modified":1512244012316},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1512244012314},{"_id":"themes/phantom/source/js/ie/html5shiv.js","hash":"6ee35415750b51dd65a6521d1dd91aba3e2ae828","modified":1512244012315},{"_id":"themes/phantom/source/js/ie/respond.min.js","hash":"8e786bcf921518f0c8c46d14a51235af2fb99926","modified":1512244012315},{"_id":"themes/phantom/source/sass/base/_typography.scss","hash":"42347bd599bf7c8b1825cbf823e9c4218d1efa85","modified":1512244012317},{"_id":"themes/phantom/source/sass/base/_page.scss","hash":"ad76315b33bc518cde02dcce0bbd4083f826c68c","modified":1512244012317},{"_id":"themes/phantom/source/sass/components/_archives.scss","hash":"c67d35c13df4ba96780a9db92884113ba20527d7","modified":1512244012317},{"_id":"themes/phantom/source/sass/base/_code.scss","hash":"251e8e50689bee360c7132c86f26edee32f7aa1a","modified":1512244012317},{"_id":"themes/phantom/source/sass/components/_gallery.scss","hash":"a7d7973d8dbe0391a66b10b77d6d0848dbc69596","modified":1512244012318},{"_id":"themes/phantom/source/sass/components/_box.scss","hash":"78e0660402876cece2af4d67e6a1ca4a8e259e46","modified":1512244012317},{"_id":"themes/phantom/source/sass/components/_button.scss","hash":"b0a66782c3c971f27933adbbd9608abed4790011","modified":1512244012317},{"_id":"themes/phantom/source/sass/components/_form.scss","hash":"61f8aaf6469ba14b2d3a93ae1c2aceed959a203e","modified":1512244012318},{"_id":"themes/phantom/source/sass/components/_icon.scss","hash":"e05ce4b4ebf3860b0be710a9092c35289e2da70f","modified":1512244012318},{"_id":"themes/phantom/source/sass/components/_list.scss","hash":"3e026ecd8d3ec101f465c2b36b2a5500f8f50e8e","modified":1512244012318},{"_id":"themes/phantom/source/sass/components/_image.scss","hash":"10912b920e29c62e1832dc7e99c92d2424612a3e","modified":1512244012318},{"_id":"themes/phantom/source/sass/components/_pagination.scss","hash":"291ae4dfa01d2417d8028aa8c7592de5151f4d9c","modified":1512244012318},{"_id":"themes/phantom/source/sass/components/_table.scss","hash":"835e25f31f283ab6ed1708f8d7d4c7f055d5307b","modified":1512244012319},{"_id":"themes/phantom/source/sass/libs/_functions.scss","hash":"4f1e4e3e65837ef26d6df42487ce0ee6d9a3c4cb","modified":1512244012320},{"_id":"themes/phantom/source/sass/components/_section.scss","hash":"53cfb6eb05860f34cb2722c0802754d423473e38","modified":1512244012319},{"_id":"themes/phantom/source/sass/components/_tiles.scss","hash":"fddd479c1fc3c081affd1935c6b20b17c28ebe79","modified":1512244012319},{"_id":"themes/phantom/source/sass/libs/_mixins.scss","hash":"091d0598e9beda606514d7a87d0879ef0558ed40","modified":1512244012320},{"_id":"themes/phantom/source/sass/libs/_vars.scss","hash":"6a38a387a0d8ef6213e06b53418945192ee5c0f4","modified":1512244012321},{"_id":"themes/phantom/source/sass/layout/_footer.scss","hash":"86bcd67b4f5abb3d48f4ae333a1b8b1738d2833d","modified":1512244012319},{"_id":"themes/phantom/source/sass/libs/_skel.scss","hash":"da4ca53bc3308b9f4bf35a1a75958fbfb56b4b90","modified":1512244012320},{"_id":"themes/phantom/source/sass/layout/_main.scss","hash":"9311165edc7106d27d5f09ed443a18242cb27ad0","modified":1512244012320},{"_id":"themes/phantom/source/sass/layout/_header.scss","hash":"b11291785d56a8772a7acfd00d32acb9ecf2b01a","modified":1512244012320},{"_id":"themes/phantom/source/sass/layout/_menu.scss","hash":"44a085becfe39d541b509e42900906b6e361cf40","modified":1512244012320},{"_id":"themes/phantom/source/sass/layout/_wrapper.scss","hash":"8a17f3846c73918df2e44ab88bbbd49151f18044","modified":1512244012320},{"_id":"source/2016/12/22/images/vr.jpg","hash":"e4d99d525d4c247ce8de7a96707ef0d211f0f125","modified":1512244012277},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1512244012313},{"_id":"source/2016/12/22/images/vr.png","hash":"684f3d10678769242a0badbcf93eb32806de0a33","modified":1512244012280},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517716479567},{"_id":"source/images/luca-bravo-small.jpg","hash":"107d1a8b32d58259ea94a9d6a6671c62fb1fe91c","modified":1517716501228},{"_id":"source/images/sweet-ice-cream-photography-151847.jpg","hash":"be9c882665495de2b64937c4135b776dee6b5d40","modified":1517716328687},{"_id":"source/images/luca-bravo-415109.jpg","hash":"14409e876428e58bbe7173e6e950a3b418f6b6d6","modified":1517716406844}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Holiday Cheer!","date":"2016-12-22T21:50:38.000Z","comments":1,"subtitle":"Christmas Parties and VR!","cover_index":"../images/secondPost.jpg","_content":"Well, we made it to the in-laws! Unlike most folks, I actually enjoy my in-laws, so this will be a nice break. Life is good, and I feel fortunate to be where I am. It's a lot of fun to see family, but it's not so fun to be a Texan in the Midwest. It's cold up here, y'all.\n\nOkay, so now to React and VR. React recently dropped the prerelease of React VR, a combination of their React, React-Native, and now--a VR ecosystem, but I've yet to dig into that system enough to write about it with any form of eloquence. Instead, I've been making do with the Aframe-React package. It works really well, and it's been designed by Kevin Ngo. *[Repo Here](https://github.com/ngokevin/aframe-react)*\n\n### Aframe-React\nAframe is also a wrapper around Three.js...which is a wrapper around WebGL. A fair amount of obfuscation, but I'd rather do fun things than try to remember an inordinate amount of math from high-school. Ha! I'd tell you that Aframe-React doesn't have enough components, but Kevin's the primary developer for Aframe as well, so...papa knows best. Aframe-React presents us with two real components:\n\n#### `<Scene/>`\nScene functions as a wrapper around `<a-scene>`. Pretty much just set up. Don't include it, and you break things.\n\n#### `<Entity />`\n`<Entity/>`, on the other hand, is where most of the magic happens. Pass a few variables as `props` in the system, and voilà! Here's an example of how to make a 'primitive' (aka, a box):\n\n```\n<Entity\n\tanimation__rot={{property: 'rotation', dur: 2000, loop: true, to: '360 360 360'}}\n\tanimation__sca={{property: 'scale', dir: 'alternate', dur: 100, loop: true, to: '1.1 1.1 1.1'}}\n\tgeometry='primitive: box'\n\tmaterial={{color: 'red', opacity: 1}}\n\tposition='0 -0.5 -3'\n</Entity>\n```\n\nThe above example comes verbatim from Kevin Ngo's *[Boilerplate](https://github.com/ngokevin/aframe-react-boilerplate)*. Let's look closer at what it does.\n\n#### Animation\nEach of the animation props give us...animation. The property designates the type of animation; loop, duration, and to provide additional details for the animation.\n\n#### Geometry\nGeometry gives us the 'primitive' object, a box. It gives us the actual object.\n\n#### Material\nMaterial designates what goes on the object. It can be a color, or it can be a texture...or a jpeg. Oh man, I had some fun with putting various jpegs on spinning cubes. Long story short, I'm childish.\n\n#### Position\nThis places the object within your universe. Together, all of these things give you...\n\n### A Cube!\n\n![](../images/vr.jpg)\n\n\n### Conclusion\nSo that's that! Kidding, there's so much more you can do with this tech, and I've only scratched the surface. I'm currently working on building an HTML Canvas/Aframe implementation, then porting it over to this React environment. While I'm doing that, I will be eating a fair amount of pie and all the Christmas cookies I can find. Happy Holidays, everyone!\n","source":"_posts/2ndPost.md","raw":"---\ntitle: Holiday Cheer!\ndate: 2016-12-22 15:50:38\ntags:\ncomments: true\nsubtitle: Christmas Parties and VR!\ncover_index: ../images/secondPost.jpg\n---\nWell, we made it to the in-laws! Unlike most folks, I actually enjoy my in-laws, so this will be a nice break. Life is good, and I feel fortunate to be where I am. It's a lot of fun to see family, but it's not so fun to be a Texan in the Midwest. It's cold up here, y'all.\n\nOkay, so now to React and VR. React recently dropped the prerelease of React VR, a combination of their React, React-Native, and now--a VR ecosystem, but I've yet to dig into that system enough to write about it with any form of eloquence. Instead, I've been making do with the Aframe-React package. It works really well, and it's been designed by Kevin Ngo. *[Repo Here](https://github.com/ngokevin/aframe-react)*\n\n### Aframe-React\nAframe is also a wrapper around Three.js...which is a wrapper around WebGL. A fair amount of obfuscation, but I'd rather do fun things than try to remember an inordinate amount of math from high-school. Ha! I'd tell you that Aframe-React doesn't have enough components, but Kevin's the primary developer for Aframe as well, so...papa knows best. Aframe-React presents us with two real components:\n\n#### `<Scene/>`\nScene functions as a wrapper around `<a-scene>`. Pretty much just set up. Don't include it, and you break things.\n\n#### `<Entity />`\n`<Entity/>`, on the other hand, is where most of the magic happens. Pass a few variables as `props` in the system, and voilà! Here's an example of how to make a 'primitive' (aka, a box):\n\n```\n<Entity\n\tanimation__rot={{property: 'rotation', dur: 2000, loop: true, to: '360 360 360'}}\n\tanimation__sca={{property: 'scale', dir: 'alternate', dur: 100, loop: true, to: '1.1 1.1 1.1'}}\n\tgeometry='primitive: box'\n\tmaterial={{color: 'red', opacity: 1}}\n\tposition='0 -0.5 -3'\n</Entity>\n```\n\nThe above example comes verbatim from Kevin Ngo's *[Boilerplate](https://github.com/ngokevin/aframe-react-boilerplate)*. Let's look closer at what it does.\n\n#### Animation\nEach of the animation props give us...animation. The property designates the type of animation; loop, duration, and to provide additional details for the animation.\n\n#### Geometry\nGeometry gives us the 'primitive' object, a box. It gives us the actual object.\n\n#### Material\nMaterial designates what goes on the object. It can be a color, or it can be a texture...or a jpeg. Oh man, I had some fun with putting various jpegs on spinning cubes. Long story short, I'm childish.\n\n#### Position\nThis places the object within your universe. Together, all of these things give you...\n\n### A Cube!\n\n![](../images/vr.jpg)\n\n\n### Conclusion\nSo that's that! Kidding, there's so much more you can do with this tech, and I've only scratched the surface. I'm currently working on building an HTML Canvas/Aframe implementation, then porting it over to this React environment. While I'm doing that, I will be eating a fair amount of pie and all the Christmas cookies I can find. Happy Holidays, everyone!\n","slug":"2ndPost","published":1,"updated":"2017-12-02T19:46:52.280Z","layout":"post","photos":[],"link":"","_id":"cjd8923f80000snuag95nng38","content":"<p>Well, we made it to the in-laws! Unlike most folks, I actually enjoy my in-laws, so this will be a nice break. Life is good, and I feel fortunate to be where I am. It’s a lot of fun to see family, but it’s not so fun to be a Texan in the Midwest. It’s cold up here, y’all.</p>\n<p>Okay, so now to React and VR. React recently dropped the prerelease of React VR, a combination of their React, React-Native, and now–a VR ecosystem, but I’ve yet to dig into that system enough to write about it with any form of eloquence. Instead, I’ve been making do with the Aframe-React package. It works really well, and it’s been designed by Kevin Ngo. <em><a href=\"https://github.com/ngokevin/aframe-react\" target=\"_blank\" rel=\"noopener\">Repo Here</a></em></p>\n<h3 id=\"Aframe-React\"><a href=\"#Aframe-React\" class=\"headerlink\" title=\"Aframe-React\"></a>Aframe-React</h3><p>Aframe is also a wrapper around Three.js…which is a wrapper around WebGL. A fair amount of obfuscation, but I’d rather do fun things than try to remember an inordinate amount of math from high-school. Ha! I’d tell you that Aframe-React doesn’t have enough components, but Kevin’s the primary developer for Aframe as well, so…papa knows best. Aframe-React presents us with two real components:</p>\n<h4 id=\"lt-Scene-gt\"><a href=\"#lt-Scene-gt\" class=\"headerlink\" title=\"&lt;Scene/&gt;\"></a><code>&lt;Scene/&gt;</code></h4><p>Scene functions as a wrapper around <code>&lt;a-scene&gt;</code>. Pretty much just set up. Don’t include it, and you break things.</p>\n<h4 id=\"lt-Entity-gt\"><a href=\"#lt-Entity-gt\" class=\"headerlink\" title=\"&lt;Entity /&gt;\"></a><code>&lt;Entity /&gt;</code></h4><p><code>&lt;Entity/&gt;</code>, on the other hand, is where most of the magic happens. Pass a few variables as <code>props</code> in the system, and voilà! Here’s an example of how to make a ‘primitive’ (aka, a box):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Entity</span><br><span class=\"line\">\tanimation__rot=&#123;&#123;property: &apos;rotation&apos;, dur: 2000, loop: true, to: &apos;360 360 360&apos;&#125;&#125;</span><br><span class=\"line\">\tanimation__sca=&#123;&#123;property: &apos;scale&apos;, dir: &apos;alternate&apos;, dur: 100, loop: true, to: &apos;1.1 1.1 1.1&apos;&#125;&#125;</span><br><span class=\"line\">\tgeometry=&apos;primitive: box&apos;</span><br><span class=\"line\">\tmaterial=&#123;&#123;color: &apos;red&apos;, opacity: 1&#125;&#125;</span><br><span class=\"line\">\tposition=&apos;0 -0.5 -3&apos;</span><br><span class=\"line\">&lt;/Entity&gt;</span><br></pre></td></tr></table></figure>\n<p>The above example comes verbatim from Kevin Ngo’s <em><a href=\"https://github.com/ngokevin/aframe-react-boilerplate\" target=\"_blank\" rel=\"noopener\">Boilerplate</a></em>. Let’s look closer at what it does.</p>\n<h4 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h4><p>Each of the animation props give us…animation. The property designates the type of animation; loop, duration, and to provide additional details for the animation.</p>\n<h4 id=\"Geometry\"><a href=\"#Geometry\" class=\"headerlink\" title=\"Geometry\"></a>Geometry</h4><p>Geometry gives us the ‘primitive’ object, a box. It gives us the actual object.</p>\n<h4 id=\"Material\"><a href=\"#Material\" class=\"headerlink\" title=\"Material\"></a>Material</h4><p>Material designates what goes on the object. It can be a color, or it can be a texture…or a jpeg. Oh man, I had some fun with putting various jpegs on spinning cubes. Long story short, I’m childish.</p>\n<h4 id=\"Position\"><a href=\"#Position\" class=\"headerlink\" title=\"Position\"></a>Position</h4><p>This places the object within your universe. Together, all of these things give you…</p>\n<h3 id=\"A-Cube\"><a href=\"#A-Cube\" class=\"headerlink\" title=\"A Cube!\"></a>A Cube!</h3><p><img src=\"../images/vr.jpg\" alt=\"\"></p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>So that’s that! Kidding, there’s so much more you can do with this tech, and I’ve only scratched the surface. I’m currently working on building an HTML Canvas/Aframe implementation, then porting it over to this React environment. While I’m doing that, I will be eating a fair amount of pie and all the Christmas cookies I can find. Happy Holidays, everyone!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Well, we made it to the in-laws! Unlike most folks, I actually enjoy my in-laws, so this will be a nice break. Life is good, and I feel fortunate to be where I am. It’s a lot of fun to see family, but it’s not so fun to be a Texan in the Midwest. It’s cold up here, y’all.</p>\n<p>Okay, so now to React and VR. React recently dropped the prerelease of React VR, a combination of their React, React-Native, and now–a VR ecosystem, but I’ve yet to dig into that system enough to write about it with any form of eloquence. Instead, I’ve been making do with the Aframe-React package. It works really well, and it’s been designed by Kevin Ngo. <em><a href=\"https://github.com/ngokevin/aframe-react\" target=\"_blank\" rel=\"noopener\">Repo Here</a></em></p>\n<h3 id=\"Aframe-React\"><a href=\"#Aframe-React\" class=\"headerlink\" title=\"Aframe-React\"></a>Aframe-React</h3><p>Aframe is also a wrapper around Three.js…which is a wrapper around WebGL. A fair amount of obfuscation, but I’d rather do fun things than try to remember an inordinate amount of math from high-school. Ha! I’d tell you that Aframe-React doesn’t have enough components, but Kevin’s the primary developer for Aframe as well, so…papa knows best. Aframe-React presents us with two real components:</p>\n<h4 id=\"lt-Scene-gt\"><a href=\"#lt-Scene-gt\" class=\"headerlink\" title=\"&lt;Scene/&gt;\"></a><code>&lt;Scene/&gt;</code></h4><p>Scene functions as a wrapper around <code>&lt;a-scene&gt;</code>. Pretty much just set up. Don’t include it, and you break things.</p>\n<h4 id=\"lt-Entity-gt\"><a href=\"#lt-Entity-gt\" class=\"headerlink\" title=\"&lt;Entity /&gt;\"></a><code>&lt;Entity /&gt;</code></h4><p><code>&lt;Entity/&gt;</code>, on the other hand, is where most of the magic happens. Pass a few variables as <code>props</code> in the system, and voilà! Here’s an example of how to make a ‘primitive’ (aka, a box):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Entity</span><br><span class=\"line\">\tanimation__rot=&#123;&#123;property: &apos;rotation&apos;, dur: 2000, loop: true, to: &apos;360 360 360&apos;&#125;&#125;</span><br><span class=\"line\">\tanimation__sca=&#123;&#123;property: &apos;scale&apos;, dir: &apos;alternate&apos;, dur: 100, loop: true, to: &apos;1.1 1.1 1.1&apos;&#125;&#125;</span><br><span class=\"line\">\tgeometry=&apos;primitive: box&apos;</span><br><span class=\"line\">\tmaterial=&#123;&#123;color: &apos;red&apos;, opacity: 1&#125;&#125;</span><br><span class=\"line\">\tposition=&apos;0 -0.5 -3&apos;</span><br><span class=\"line\">&lt;/Entity&gt;</span><br></pre></td></tr></table></figure>\n<p>The above example comes verbatim from Kevin Ngo’s <em><a href=\"https://github.com/ngokevin/aframe-react-boilerplate\" target=\"_blank\" rel=\"noopener\">Boilerplate</a></em>. Let’s look closer at what it does.</p>\n<h4 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h4><p>Each of the animation props give us…animation. The property designates the type of animation; loop, duration, and to provide additional details for the animation.</p>\n<h4 id=\"Geometry\"><a href=\"#Geometry\" class=\"headerlink\" title=\"Geometry\"></a>Geometry</h4><p>Geometry gives us the ‘primitive’ object, a box. It gives us the actual object.</p>\n<h4 id=\"Material\"><a href=\"#Material\" class=\"headerlink\" title=\"Material\"></a>Material</h4><p>Material designates what goes on the object. It can be a color, or it can be a texture…or a jpeg. Oh man, I had some fun with putting various jpegs on spinning cubes. Long story short, I’m childish.</p>\n<h4 id=\"Position\"><a href=\"#Position\" class=\"headerlink\" title=\"Position\"></a>Position</h4><p>This places the object within your universe. Together, all of these things give you…</p>\n<h3 id=\"A-Cube\"><a href=\"#A-Cube\" class=\"headerlink\" title=\"A Cube!\"></a>A Cube!</h3><p><img src=\"../images/vr.jpg\" alt=\"\"></p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>So that’s that! Kidding, there’s so much more you can do with this tech, and I’ve only scratched the surface. I’m currently working on building an HTML Canvas/Aframe implementation, then porting it over to this React environment. While I’m doing that, I will be eating a fair amount of pie and all the Christmas cookies I can find. Happy Holidays, everyone!</p>\n"},{"title":"The First Post","date":"2016-11-04T03:07:52.000Z","comments":1,"subtitle":"Welcome to the inside of my mind","cover_index":"../images/firstPost.jpg","_content":"\nThis is my first post! I finally spooled up a blog, and now I have the time to tell you about myself. I could give you a lengthy diatribe on who I am, but all that will come in time. For the first post, I'm going to tell you about how I made this blog.\n\n### Selection\n\nI went through several different options before I picked out Hexo. There were several things to consider, and I used the following criteria in my selection process. They are as follows:\n\n#### My criteria:\n\n1. Runs on Node.js.\n2. Minimal database creation. I feel like being lazy.\n3. Extensible and easily replaceable themes. I get bored, and I wanted maintainability and support for future laziness.\n4. Deployment through my own server. I have a Digital Ocean Droplet (more on that in a later blog), and I wanted to be able to run this bad boy on it. What's the point of calling myself \"Full Stack\" if I can't demonstrate it?\n\n### Ghost\n\nI started with the requisite Google search: \"Blog developer nodejs.\" The only thing that came up was Ghost, so naturally, I tried it. I didn't really like it, mostly because it's in alpha and things are broken. It's going to be a cool product, and I'll switch at some point, but while it's in alpha, that will make deployment and maintenance problematic.\n\nGhost runs Handlebars and Ember.js, which are awesome. If you know Vanilla JS, you know Ember, and Handlebars is built off of Mustache templates. Again, if you've used one templating language, you've used most of them. I haven't seen large differences in any of them (templating languages), but I also haven't used many of them in large scale production/to the nth degree.\n\nSince I build in React at work, I didn't feel like learning Ember this week. So, no Ghost for now.\n\n## Bringing us to... Hexo.\n\nHexo is a blog platfom built by [Tommy Chen](http://www.hexo.io), and it's pretty sweet. Hexo hits all of my requirements, save for being able to access the index.js (Node.js) file directly. If I need to add something, it's a little more complex than calling `import blank from 'blankity-blank`, but it runs quite well otherwise. I can import themes, and I can write and edit all of my blog posts in Markdown!\n\n### Fun, Unexpected Features\n\n#### Yaml\nHexo uses *[Yaml](http://www.yaml.org/start.html)* in most of its configuration files in lieu of the usual JSON. Haven't used it a lot thus far, and I'm really excited to dig more into it as I extend this blog out further. There's a lot of stuff going on under the hood in Hexo, and I haven't investigated a lot of it.\n\n#### A Robust NPM Community\nWith over 100 well-maintained packages, there are a lot of things I can add to Hexo to extend and customize its functionality. I don't plan on deploying to Github Pages or Heroku, but it's nice to have the option at my fingertips.\n\n#### A community of designers\nThere's a lot of extensible inspiration online, and there are a lot of awesome people sharing themes. My current theme is [Phantom](https://github.com/klugjo/hexo-theme-phantom), and I love its minimalism and conscious UI decisions.\n\n#### CLI\nHexo uses a CLI to spin up blog posts. More information is available in their [docs](https://hexo.io/docs/). Check it out, and spin one up for yourself!\n\n### On the Docket/In Closing\n\nFeel free to check out this project's source at my [GitHub](https://www.github.com/chanceakin). See something that's terrible or misattributed, send me an issue and I'll fix it!\n\nThis weekend, I'm headed to the farm. Next week, I'll be talking about something I'm learning or working on, most likely: React, Mocha, or Sass (SCSS). Maybe about some BBQ, too. I am in Austin, after all.3\n\nUntil next time,\nChance\n","source":"_posts/First-Post.md","raw":"---\ntitle: The First Post\ndate: 2016-11-03 22:07:52\ntags: life\ncomments: true\nsubtitle: Welcome to the inside of my mind\ncover_index: ../images/firstPost.jpg\n---\n\nThis is my first post! I finally spooled up a blog, and now I have the time to tell you about myself. I could give you a lengthy diatribe on who I am, but all that will come in time. For the first post, I'm going to tell you about how I made this blog.\n\n### Selection\n\nI went through several different options before I picked out Hexo. There were several things to consider, and I used the following criteria in my selection process. They are as follows:\n\n#### My criteria:\n\n1. Runs on Node.js.\n2. Minimal database creation. I feel like being lazy.\n3. Extensible and easily replaceable themes. I get bored, and I wanted maintainability and support for future laziness.\n4. Deployment through my own server. I have a Digital Ocean Droplet (more on that in a later blog), and I wanted to be able to run this bad boy on it. What's the point of calling myself \"Full Stack\" if I can't demonstrate it?\n\n### Ghost\n\nI started with the requisite Google search: \"Blog developer nodejs.\" The only thing that came up was Ghost, so naturally, I tried it. I didn't really like it, mostly because it's in alpha and things are broken. It's going to be a cool product, and I'll switch at some point, but while it's in alpha, that will make deployment and maintenance problematic.\n\nGhost runs Handlebars and Ember.js, which are awesome. If you know Vanilla JS, you know Ember, and Handlebars is built off of Mustache templates. Again, if you've used one templating language, you've used most of them. I haven't seen large differences in any of them (templating languages), but I also haven't used many of them in large scale production/to the nth degree.\n\nSince I build in React at work, I didn't feel like learning Ember this week. So, no Ghost for now.\n\n## Bringing us to... Hexo.\n\nHexo is a blog platfom built by [Tommy Chen](http://www.hexo.io), and it's pretty sweet. Hexo hits all of my requirements, save for being able to access the index.js (Node.js) file directly. If I need to add something, it's a little more complex than calling `import blank from 'blankity-blank`, but it runs quite well otherwise. I can import themes, and I can write and edit all of my blog posts in Markdown!\n\n### Fun, Unexpected Features\n\n#### Yaml\nHexo uses *[Yaml](http://www.yaml.org/start.html)* in most of its configuration files in lieu of the usual JSON. Haven't used it a lot thus far, and I'm really excited to dig more into it as I extend this blog out further. There's a lot of stuff going on under the hood in Hexo, and I haven't investigated a lot of it.\n\n#### A Robust NPM Community\nWith over 100 well-maintained packages, there are a lot of things I can add to Hexo to extend and customize its functionality. I don't plan on deploying to Github Pages or Heroku, but it's nice to have the option at my fingertips.\n\n#### A community of designers\nThere's a lot of extensible inspiration online, and there are a lot of awesome people sharing themes. My current theme is [Phantom](https://github.com/klugjo/hexo-theme-phantom), and I love its minimalism and conscious UI decisions.\n\n#### CLI\nHexo uses a CLI to spin up blog posts. More information is available in their [docs](https://hexo.io/docs/). Check it out, and spin one up for yourself!\n\n### On the Docket/In Closing\n\nFeel free to check out this project's source at my [GitHub](https://www.github.com/chanceakin). See something that's terrible or misattributed, send me an issue and I'll fix it!\n\nThis weekend, I'm headed to the farm. Next week, I'll be talking about something I'm learning or working on, most likely: React, Mocha, or Sass (SCSS). Maybe about some BBQ, too. I am in Austin, after all.3\n\nUntil next time,\nChance\n","slug":"First-Post","published":1,"updated":"2017-12-02T19:46:52.280Z","layout":"post","photos":[],"link":"","_id":"cjd8923fc0001snua0y8ak8hb","content":"<p>This is my first post! I finally spooled up a blog, and now I have the time to tell you about myself. I could give you a lengthy diatribe on who I am, but all that will come in time. For the first post, I’m going to tell you about how I made this blog.</p>\n<h3 id=\"Selection\"><a href=\"#Selection\" class=\"headerlink\" title=\"Selection\"></a>Selection</h3><p>I went through several different options before I picked out Hexo. There were several things to consider, and I used the following criteria in my selection process. They are as follows:</p>\n<h4 id=\"My-criteria\"><a href=\"#My-criteria\" class=\"headerlink\" title=\"My criteria:\"></a>My criteria:</h4><ol>\n<li>Runs on Node.js.</li>\n<li>Minimal database creation. I feel like being lazy.</li>\n<li>Extensible and easily replaceable themes. I get bored, and I wanted maintainability and support for future laziness.</li>\n<li>Deployment through my own server. I have a Digital Ocean Droplet (more on that in a later blog), and I wanted to be able to run this bad boy on it. What’s the point of calling myself “Full Stack” if I can’t demonstrate it?</li>\n</ol>\n<h3 id=\"Ghost\"><a href=\"#Ghost\" class=\"headerlink\" title=\"Ghost\"></a>Ghost</h3><p>I started with the requisite Google search: “Blog developer nodejs.” The only thing that came up was Ghost, so naturally, I tried it. I didn’t really like it, mostly because it’s in alpha and things are broken. It’s going to be a cool product, and I’ll switch at some point, but while it’s in alpha, that will make deployment and maintenance problematic.</p>\n<p>Ghost runs Handlebars and Ember.js, which are awesome. If you know Vanilla JS, you know Ember, and Handlebars is built off of Mustache templates. Again, if you’ve used one templating language, you’ve used most of them. I haven’t seen large differences in any of them (templating languages), but I also haven’t used many of them in large scale production/to the nth degree.</p>\n<p>Since I build in React at work, I didn’t feel like learning Ember this week. So, no Ghost for now.</p>\n<h2 id=\"Bringing-us-to…-Hexo\"><a href=\"#Bringing-us-to…-Hexo\" class=\"headerlink\" title=\"Bringing us to… Hexo.\"></a>Bringing us to… Hexo.</h2><p>Hexo is a blog platfom built by <a href=\"http://www.hexo.io\" target=\"_blank\" rel=\"noopener\">Tommy Chen</a>, and it’s pretty sweet. Hexo hits all of my requirements, save for being able to access the index.js (Node.js) file directly. If I need to add something, it’s a little more complex than calling <code>import blank from &#39;blankity-blank</code>, but it runs quite well otherwise. I can import themes, and I can write and edit all of my blog posts in Markdown!</p>\n<h3 id=\"Fun-Unexpected-Features\"><a href=\"#Fun-Unexpected-Features\" class=\"headerlink\" title=\"Fun, Unexpected Features\"></a>Fun, Unexpected Features</h3><h4 id=\"Yaml\"><a href=\"#Yaml\" class=\"headerlink\" title=\"Yaml\"></a>Yaml</h4><p>Hexo uses <em><a href=\"http://www.yaml.org/start.html\" target=\"_blank\" rel=\"noopener\">Yaml</a></em> in most of its configuration files in lieu of the usual JSON. Haven’t used it a lot thus far, and I’m really excited to dig more into it as I extend this blog out further. There’s a lot of stuff going on under the hood in Hexo, and I haven’t investigated a lot of it.</p>\n<h4 id=\"A-Robust-NPM-Community\"><a href=\"#A-Robust-NPM-Community\" class=\"headerlink\" title=\"A Robust NPM Community\"></a>A Robust NPM Community</h4><p>With over 100 well-maintained packages, there are a lot of things I can add to Hexo to extend and customize its functionality. I don’t plan on deploying to Github Pages or Heroku, but it’s nice to have the option at my fingertips.</p>\n<h4 id=\"A-community-of-designers\"><a href=\"#A-community-of-designers\" class=\"headerlink\" title=\"A community of designers\"></a>A community of designers</h4><p>There’s a lot of extensible inspiration online, and there are a lot of awesome people sharing themes. My current theme is <a href=\"https://github.com/klugjo/hexo-theme-phantom\" target=\"_blank\" rel=\"noopener\">Phantom</a>, and I love its minimalism and conscious UI decisions.</p>\n<h4 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h4><p>Hexo uses a CLI to spin up blog posts. More information is available in their <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">docs</a>. Check it out, and spin one up for yourself!</p>\n<h3 id=\"On-the-Docket-In-Closing\"><a href=\"#On-the-Docket-In-Closing\" class=\"headerlink\" title=\"On the Docket/In Closing\"></a>On the Docket/In Closing</h3><p>Feel free to check out this project’s source at my <a href=\"https://www.github.com/chanceakin\" target=\"_blank\" rel=\"noopener\">GitHub</a>. See something that’s terrible or misattributed, send me an issue and I’ll fix it!</p>\n<p>This weekend, I’m headed to the farm. Next week, I’ll be talking about something I’m learning or working on, most likely: React, Mocha, or Sass (SCSS). Maybe about some BBQ, too. I am in Austin, after all.3</p>\n<p>Until next time,<br>Chance</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is my first post! I finally spooled up a blog, and now I have the time to tell you about myself. I could give you a lengthy diatribe on who I am, but all that will come in time. For the first post, I’m going to tell you about how I made this blog.</p>\n<h3 id=\"Selection\"><a href=\"#Selection\" class=\"headerlink\" title=\"Selection\"></a>Selection</h3><p>I went through several different options before I picked out Hexo. There were several things to consider, and I used the following criteria in my selection process. They are as follows:</p>\n<h4 id=\"My-criteria\"><a href=\"#My-criteria\" class=\"headerlink\" title=\"My criteria:\"></a>My criteria:</h4><ol>\n<li>Runs on Node.js.</li>\n<li>Minimal database creation. I feel like being lazy.</li>\n<li>Extensible and easily replaceable themes. I get bored, and I wanted maintainability and support for future laziness.</li>\n<li>Deployment through my own server. I have a Digital Ocean Droplet (more on that in a later blog), and I wanted to be able to run this bad boy on it. What’s the point of calling myself “Full Stack” if I can’t demonstrate it?</li>\n</ol>\n<h3 id=\"Ghost\"><a href=\"#Ghost\" class=\"headerlink\" title=\"Ghost\"></a>Ghost</h3><p>I started with the requisite Google search: “Blog developer nodejs.” The only thing that came up was Ghost, so naturally, I tried it. I didn’t really like it, mostly because it’s in alpha and things are broken. It’s going to be a cool product, and I’ll switch at some point, but while it’s in alpha, that will make deployment and maintenance problematic.</p>\n<p>Ghost runs Handlebars and Ember.js, which are awesome. If you know Vanilla JS, you know Ember, and Handlebars is built off of Mustache templates. Again, if you’ve used one templating language, you’ve used most of them. I haven’t seen large differences in any of them (templating languages), but I also haven’t used many of them in large scale production/to the nth degree.</p>\n<p>Since I build in React at work, I didn’t feel like learning Ember this week. So, no Ghost for now.</p>\n<h2 id=\"Bringing-us-to…-Hexo\"><a href=\"#Bringing-us-to…-Hexo\" class=\"headerlink\" title=\"Bringing us to… Hexo.\"></a>Bringing us to… Hexo.</h2><p>Hexo is a blog platfom built by <a href=\"http://www.hexo.io\" target=\"_blank\" rel=\"noopener\">Tommy Chen</a>, and it’s pretty sweet. Hexo hits all of my requirements, save for being able to access the index.js (Node.js) file directly. If I need to add something, it’s a little more complex than calling <code>import blank from &#39;blankity-blank</code>, but it runs quite well otherwise. I can import themes, and I can write and edit all of my blog posts in Markdown!</p>\n<h3 id=\"Fun-Unexpected-Features\"><a href=\"#Fun-Unexpected-Features\" class=\"headerlink\" title=\"Fun, Unexpected Features\"></a>Fun, Unexpected Features</h3><h4 id=\"Yaml\"><a href=\"#Yaml\" class=\"headerlink\" title=\"Yaml\"></a>Yaml</h4><p>Hexo uses <em><a href=\"http://www.yaml.org/start.html\" target=\"_blank\" rel=\"noopener\">Yaml</a></em> in most of its configuration files in lieu of the usual JSON. Haven’t used it a lot thus far, and I’m really excited to dig more into it as I extend this blog out further. There’s a lot of stuff going on under the hood in Hexo, and I haven’t investigated a lot of it.</p>\n<h4 id=\"A-Robust-NPM-Community\"><a href=\"#A-Robust-NPM-Community\" class=\"headerlink\" title=\"A Robust NPM Community\"></a>A Robust NPM Community</h4><p>With over 100 well-maintained packages, there are a lot of things I can add to Hexo to extend and customize its functionality. I don’t plan on deploying to Github Pages or Heroku, but it’s nice to have the option at my fingertips.</p>\n<h4 id=\"A-community-of-designers\"><a href=\"#A-community-of-designers\" class=\"headerlink\" title=\"A community of designers\"></a>A community of designers</h4><p>There’s a lot of extensible inspiration online, and there are a lot of awesome people sharing themes. My current theme is <a href=\"https://github.com/klugjo/hexo-theme-phantom\" target=\"_blank\" rel=\"noopener\">Phantom</a>, and I love its minimalism and conscious UI decisions.</p>\n<h4 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h4><p>Hexo uses a CLI to spin up blog posts. More information is available in their <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">docs</a>. Check it out, and spin one up for yourself!</p>\n<h3 id=\"On-the-Docket-In-Closing\"><a href=\"#On-the-Docket-In-Closing\" class=\"headerlink\" title=\"On the Docket/In Closing\"></a>On the Docket/In Closing</h3><p>Feel free to check out this project’s source at my <a href=\"https://www.github.com/chanceakin\" target=\"_blank\" rel=\"noopener\">GitHub</a>. See something that’s terrible or misattributed, send me an issue and I’ll fix it!</p>\n<p>This weekend, I’m headed to the farm. Next week, I’ll be talking about something I’m learning or working on, most likely: React, Mocha, or Sass (SCSS). Maybe about some BBQ, too. I am in Austin, after all.3</p>\n<p>Until next time,<br>Chance</p>\n"},{"title":"April 2017","date":"2017-04-13T23:26:38.000Z","comments":1,"subtitle":"Spring in Texas","cover_index":"../images/april.jpg","_content":"\n# Time flies.\n\nIt has been entirely too long since I wrote anything! The world got busy, and it dragged me along with it. So, I suppose I should recap my adventures.\n\n## What I've been working on\n1. Created a new version of my portfolio in React/Redux with Material Design\n2. Created a VR application using Aframe/React. It takes from Twitter users' tweets\nand renders them in VR.\n\n## Portfolio\n\nWhen I wrote my last blog entry, I was working on building my portfolio! Here it is:\n\n[My Portfolio](https://chanceeakin.io)\n\nA non-exhaustive list of the tech I used:\n*  React MD (The view library upon which this is based)\n*  Let's Encrypt for HTTPS encryption\n*  The usual suspects and buzzwords\n\nI'm a huge fan of minimal, archetypal design. Material Design in particular. So when I found out that there was a React/Redux port of Google's flagship Design paradigm, I had to jump on it! It's a great way to learn and quickly iterate using sound design principles, as well as play with some exciting Javascript technology. Let's dig in:\n\n#### The Business\n\nReact MD is built in Javascript, namely ES6, and it takes advantage of the newer parts of the language. It also incorporates most of the cooler stuff about Redux: functional programming, modular code, etc.  The semantic organization of stylesheets wth container components is awesome, and adds for some painless visual grepping. All in all, a really cool set of tools. A set of tools I really didn't know how to use, until I built the thing. Hell, I still wonder if I actually know React/Redux.\n\nThe big pain point was when I made a redux cycle for checking window size. I wanted a different nav menu based on window width. In order to do that, I had to create an action, make it some reducers, hook it into the store. You know, Redux it up. The underlying cause of difficulty for me was application state (which differs substantially from react's state). Application state is the data your application uses data over time. I think we underemphasize the difficulty of understanding that concept, so here's my attempt at it.\n\nHave you ever watched Interstellar? (SPOILER) Assuming you have, in the scene where Matt's character is in the dimensional representation of time (aka, the tesseract), he interacts with different snapshots of his daughter's room. Same room, different time. This is application state. Our data is like the dust, the books, the watch. We use some functions to move the data. The room stays the same. It's the only representation that makes sense to me. We use all the collected actions, reducers, and stores to create new snapshots of time. Without the snappy robot.\n\nOnce I figured out application state, a lot of the underly React/Redux infrastructure clicked, and voilà! A working, resizable menu.\n\n## My VR application\n\nMy best friend from highschool is now a high school economics teacher, so I'm headed to speak to some kids in a week or two about code and about life. I thought that while I'm there, I could show them something fun. Since I'd been meaning to work with AframeVR, here's a follow up from earlier.\n\n#### The Business\n\nIt got more difficult when I started using and building Aframe components. Aframe is fantastic, but it has some limitations--if only in terms of what it offers out of the box. In order to expand the power of the VR wrapper, it helps to know some three.js. In this case, I didn't have a grid component, so I wrote one. It was a wrapper to initialize a three.js element, like so:\n\n```Javascript\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.')\n}\n\nAFRAME.registerComponent('trongrid', {\n  schema: {\n    size: {default: 10},\n    divisions: {default: 10},\n    colorCenterLine: {default: '#bada55'},\n    colorGrid: {default: '#bada55'}\n  },\n  init: function () {\n    var scene = this.el.object3D\n    var data = this.data\n    /* populates the three.js layer with registered data or defaults from schema. */\n\n    var geometry = new THREE.GridHelper(data.size, data.divisions, data.colorCenterLine, data.colorGrid)\n    scene.add(geometry)\n  },\n  remove: function () {\n    var scene = this.el.object3D\n    scene.remove(scene.getObjectByName('trongrid'))\n  }\n})\n```\n\nFun, right? The first few lines check for Aframe, and the `registerComponent` portion creates a composable grid element. I wanted it to look like Tron, dammit. Here's where things get fun. React adds an extra layer of difficulty to implementing Aframe successfully, mostly because of how node modules need to imported. As it turns out, someone else wrote a better (ie, already published) npm package for an `aframe-gridhelper-component`, so I used that one instead. All that work for ~~nothing~~ learning. The crux of the matter: I couldn't get the component to change color. When working with React, the syntax for dealing with `<a-entity>` becomes `<Entity />`, among others. Here's what I mean.\n\n\n##### Vanilla Aframe\n```html\n<a-entity gridhelper=\"size: 100; divisions: 100; colorCenterLine: black; colorGrid: black;\"></a-entity>\n\n```\n\n##### React Aframe\n```HTML\n<Entity\n  gridhelper={{size: 100, divisions: 100, colorCenterLine: \"rgb(90, 229, 252)\", colorGrid: \"rgb(90, 229, 252)\"}}\n/>\n```\n\nSee the difference? I don't want to tell you how long that little distinction took me to figure out. Hint: not. short. After fighting with Webpack to proxy my API server layer into the fun, the whole thing went off smoothly! [Repo is here: vr-data-visualizer](https://github.com/chanceeakin/vr-data-visualizer).\n\n### Conclusion\n\nEaster's coming up soon, and incidentally, I've been training for a Tough Mudder in May! Stay tuned for pictures!\n","source":"_posts/april2017.md","raw":"---\ntitle: April 2017\ndate: 2017-04-13 18:26:38\ntags:\ncomments: true\nsubtitle: Spring in Texas\ncover_index: ../images/april.jpg\n---\n\n# Time flies.\n\nIt has been entirely too long since I wrote anything! The world got busy, and it dragged me along with it. So, I suppose I should recap my adventures.\n\n## What I've been working on\n1. Created a new version of my portfolio in React/Redux with Material Design\n2. Created a VR application using Aframe/React. It takes from Twitter users' tweets\nand renders them in VR.\n\n## Portfolio\n\nWhen I wrote my last blog entry, I was working on building my portfolio! Here it is:\n\n[My Portfolio](https://chanceeakin.io)\n\nA non-exhaustive list of the tech I used:\n*  React MD (The view library upon which this is based)\n*  Let's Encrypt for HTTPS encryption\n*  The usual suspects and buzzwords\n\nI'm a huge fan of minimal, archetypal design. Material Design in particular. So when I found out that there was a React/Redux port of Google's flagship Design paradigm, I had to jump on it! It's a great way to learn and quickly iterate using sound design principles, as well as play with some exciting Javascript technology. Let's dig in:\n\n#### The Business\n\nReact MD is built in Javascript, namely ES6, and it takes advantage of the newer parts of the language. It also incorporates most of the cooler stuff about Redux: functional programming, modular code, etc.  The semantic organization of stylesheets wth container components is awesome, and adds for some painless visual grepping. All in all, a really cool set of tools. A set of tools I really didn't know how to use, until I built the thing. Hell, I still wonder if I actually know React/Redux.\n\nThe big pain point was when I made a redux cycle for checking window size. I wanted a different nav menu based on window width. In order to do that, I had to create an action, make it some reducers, hook it into the store. You know, Redux it up. The underlying cause of difficulty for me was application state (which differs substantially from react's state). Application state is the data your application uses data over time. I think we underemphasize the difficulty of understanding that concept, so here's my attempt at it.\n\nHave you ever watched Interstellar? (SPOILER) Assuming you have, in the scene where Matt's character is in the dimensional representation of time (aka, the tesseract), he interacts with different snapshots of his daughter's room. Same room, different time. This is application state. Our data is like the dust, the books, the watch. We use some functions to move the data. The room stays the same. It's the only representation that makes sense to me. We use all the collected actions, reducers, and stores to create new snapshots of time. Without the snappy robot.\n\nOnce I figured out application state, a lot of the underly React/Redux infrastructure clicked, and voilà! A working, resizable menu.\n\n## My VR application\n\nMy best friend from highschool is now a high school economics teacher, so I'm headed to speak to some kids in a week or two about code and about life. I thought that while I'm there, I could show them something fun. Since I'd been meaning to work with AframeVR, here's a follow up from earlier.\n\n#### The Business\n\nIt got more difficult when I started using and building Aframe components. Aframe is fantastic, but it has some limitations--if only in terms of what it offers out of the box. In order to expand the power of the VR wrapper, it helps to know some three.js. In this case, I didn't have a grid component, so I wrote one. It was a wrapper to initialize a three.js element, like so:\n\n```Javascript\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.')\n}\n\nAFRAME.registerComponent('trongrid', {\n  schema: {\n    size: {default: 10},\n    divisions: {default: 10},\n    colorCenterLine: {default: '#bada55'},\n    colorGrid: {default: '#bada55'}\n  },\n  init: function () {\n    var scene = this.el.object3D\n    var data = this.data\n    /* populates the three.js layer with registered data or defaults from schema. */\n\n    var geometry = new THREE.GridHelper(data.size, data.divisions, data.colorCenterLine, data.colorGrid)\n    scene.add(geometry)\n  },\n  remove: function () {\n    var scene = this.el.object3D\n    scene.remove(scene.getObjectByName('trongrid'))\n  }\n})\n```\n\nFun, right? The first few lines check for Aframe, and the `registerComponent` portion creates a composable grid element. I wanted it to look like Tron, dammit. Here's where things get fun. React adds an extra layer of difficulty to implementing Aframe successfully, mostly because of how node modules need to imported. As it turns out, someone else wrote a better (ie, already published) npm package for an `aframe-gridhelper-component`, so I used that one instead. All that work for ~~nothing~~ learning. The crux of the matter: I couldn't get the component to change color. When working with React, the syntax for dealing with `<a-entity>` becomes `<Entity />`, among others. Here's what I mean.\n\n\n##### Vanilla Aframe\n```html\n<a-entity gridhelper=\"size: 100; divisions: 100; colorCenterLine: black; colorGrid: black;\"></a-entity>\n\n```\n\n##### React Aframe\n```HTML\n<Entity\n  gridhelper={{size: 100, divisions: 100, colorCenterLine: \"rgb(90, 229, 252)\", colorGrid: \"rgb(90, 229, 252)\"}}\n/>\n```\n\nSee the difference? I don't want to tell you how long that little distinction took me to figure out. Hint: not. short. After fighting with Webpack to proxy my API server layer into the fun, the whole thing went off smoothly! [Repo is here: vr-data-visualizer](https://github.com/chanceeakin/vr-data-visualizer).\n\n### Conclusion\n\nEaster's coming up soon, and incidentally, I've been training for a Tough Mudder in May! Stay tuned for pictures!\n","slug":"april2017","published":1,"updated":"2017-12-02T19:46:52.281Z","layout":"post","photos":[],"link":"","_id":"cjd8923fe0002snuakshao92n","content":"<h1 id=\"Time-flies\"><a href=\"#Time-flies\" class=\"headerlink\" title=\"Time flies.\"></a>Time flies.</h1><p>It has been entirely too long since I wrote anything! The world got busy, and it dragged me along with it. So, I suppose I should recap my adventures.</p>\n<h2 id=\"What-I’ve-been-working-on\"><a href=\"#What-I’ve-been-working-on\" class=\"headerlink\" title=\"What I’ve been working on\"></a>What I’ve been working on</h2><ol>\n<li>Created a new version of my portfolio in React/Redux with Material Design</li>\n<li>Created a VR application using Aframe/React. It takes from Twitter users’ tweets<br>and renders them in VR.</li>\n</ol>\n<h2 id=\"Portfolio\"><a href=\"#Portfolio\" class=\"headerlink\" title=\"Portfolio\"></a>Portfolio</h2><p>When I wrote my last blog entry, I was working on building my portfolio! Here it is:</p>\n<p><a href=\"https://chanceeakin.io\" target=\"_blank\" rel=\"noopener\">My Portfolio</a></p>\n<p>A non-exhaustive list of the tech I used:</p>\n<ul>\n<li>React MD (The view library upon which this is based)</li>\n<li>Let’s Encrypt for HTTPS encryption</li>\n<li>The usual suspects and buzzwords</li>\n</ul>\n<p>I’m a huge fan of minimal, archetypal design. Material Design in particular. So when I found out that there was a React/Redux port of Google’s flagship Design paradigm, I had to jump on it! It’s a great way to learn and quickly iterate using sound design principles, as well as play with some exciting Javascript technology. Let’s dig in:</p>\n<h4 id=\"The-Business\"><a href=\"#The-Business\" class=\"headerlink\" title=\"The Business\"></a>The Business</h4><p>React MD is built in Javascript, namely ES6, and it takes advantage of the newer parts of the language. It also incorporates most of the cooler stuff about Redux: functional programming, modular code, etc.  The semantic organization of stylesheets wth container components is awesome, and adds for some painless visual grepping. All in all, a really cool set of tools. A set of tools I really didn’t know how to use, until I built the thing. Hell, I still wonder if I actually know React/Redux.</p>\n<p>The big pain point was when I made a redux cycle for checking window size. I wanted a different nav menu based on window width. In order to do that, I had to create an action, make it some reducers, hook it into the store. You know, Redux it up. The underlying cause of difficulty for me was application state (which differs substantially from react’s state). Application state is the data your application uses data over time. I think we underemphasize the difficulty of understanding that concept, so here’s my attempt at it.</p>\n<p>Have you ever watched Interstellar? (SPOILER) Assuming you have, in the scene where Matt’s character is in the dimensional representation of time (aka, the tesseract), he interacts with different snapshots of his daughter’s room. Same room, different time. This is application state. Our data is like the dust, the books, the watch. We use some functions to move the data. The room stays the same. It’s the only representation that makes sense to me. We use all the collected actions, reducers, and stores to create new snapshots of time. Without the snappy robot.</p>\n<p>Once I figured out application state, a lot of the underly React/Redux infrastructure clicked, and voilà! A working, resizable menu.</p>\n<h2 id=\"My-VR-application\"><a href=\"#My-VR-application\" class=\"headerlink\" title=\"My VR application\"></a>My VR application</h2><p>My best friend from highschool is now a high school economics teacher, so I’m headed to speak to some kids in a week or two about code and about life. I thought that while I’m there, I could show them something fun. Since I’d been meaning to work with AframeVR, here’s a follow up from earlier.</p>\n<h4 id=\"The-Business-1\"><a href=\"#The-Business-1\" class=\"headerlink\" title=\"The Business\"></a>The Business</h4><p>It got more difficult when I started using and building Aframe components. Aframe is fantastic, but it has some limitations–if only in terms of what it offers out of the box. In order to expand the power of the VR wrapper, it helps to know some three.js. In this case, I didn’t have a grid component, so I wrote one. It was a wrapper to initialize a three.js element, like so:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> AFRAME === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Component attempted to register before AFRAME was available.'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AFRAME.registerComponent(<span class=\"string\">'trongrid'</span>, &#123;</span><br><span class=\"line\">  schema: &#123;</span><br><span class=\"line\">    size: &#123;<span class=\"attr\">default</span>: <span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">    divisions: &#123;<span class=\"attr\">default</span>: <span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">    colorCenterLine: &#123;<span class=\"attr\">default</span>: <span class=\"string\">'#bada55'</span>&#125;,</span><br><span class=\"line\">    colorGrid: &#123;<span class=\"attr\">default</span>: <span class=\"string\">'#bada55'</span>&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scene = <span class=\"keyword\">this</span>.el.object3D</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    <span class=\"comment\">/* populates the three.js layer with registered data or defaults from schema. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.GridHelper(data.size, data.divisions, data.colorCenterLine, data.colorGrid)</span><br><span class=\"line\">    scene.add(geometry)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  remove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scene = <span class=\"keyword\">this</span>.el.object3D</span><br><span class=\"line\">    scene.remove(scene.getObjectByName(<span class=\"string\">'trongrid'</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Fun, right? The first few lines check for Aframe, and the <code>registerComponent</code> portion creates a composable grid element. I wanted it to look like Tron, dammit. Here’s where things get fun. React adds an extra layer of difficulty to implementing Aframe successfully, mostly because of how node modules need to imported. As it turns out, someone else wrote a better (ie, already published) npm package for an <code>aframe-gridhelper-component</code>, so I used that one instead. All that work for <del>nothing</del> learning. The crux of the matter: I couldn’t get the component to change color. When working with React, the syntax for dealing with <code>&lt;a-entity&gt;</code> becomes <code>&lt;Entity /&gt;</code>, among others. Here’s what I mean.</p>\n<h5 id=\"Vanilla-Aframe\"><a href=\"#Vanilla-Aframe\" class=\"headerlink\" title=\"Vanilla Aframe\"></a>Vanilla Aframe</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-entity</span> <span class=\"attr\">gridhelper</span>=<span class=\"string\">\"size: 100; divisions: 100; colorCenterLine: black; colorGrid: black;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a-entity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"React-Aframe\"><a href=\"#React-Aframe\" class=\"headerlink\" title=\"React Aframe\"></a>React Aframe</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Entity</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">gridhelper</span>=<span class=\"string\">&#123;&#123;size:</span> <span class=\"attr\">100</span>, <span class=\"attr\">divisions:</span> <span class=\"attr\">100</span>, <span class=\"attr\">colorCenterLine:</span> \"<span class=\"attr\">rgb</span>(<span class=\"attr\">90</span>, <span class=\"attr\">229</span>, <span class=\"attr\">252</span>)\", <span class=\"attr\">colorGrid:</span> \"<span class=\"attr\">rgb</span>(<span class=\"attr\">90</span>, <span class=\"attr\">229</span>, <span class=\"attr\">252</span>)\"&#125;&#125;</span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>See the difference? I don’t want to tell you how long that little distinction took me to figure out. Hint: not. short. After fighting with Webpack to proxy my API server layer into the fun, the whole thing went off smoothly! <a href=\"https://github.com/chanceeakin/vr-data-visualizer\" target=\"_blank\" rel=\"noopener\">Repo is here: vr-data-visualizer</a>.</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>Easter’s coming up soon, and incidentally, I’ve been training for a Tough Mudder in May! Stay tuned for pictures!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Time-flies\"><a href=\"#Time-flies\" class=\"headerlink\" title=\"Time flies.\"></a>Time flies.</h1><p>It has been entirely too long since I wrote anything! The world got busy, and it dragged me along with it. So, I suppose I should recap my adventures.</p>\n<h2 id=\"What-I’ve-been-working-on\"><a href=\"#What-I’ve-been-working-on\" class=\"headerlink\" title=\"What I’ve been working on\"></a>What I’ve been working on</h2><ol>\n<li>Created a new version of my portfolio in React/Redux with Material Design</li>\n<li>Created a VR application using Aframe/React. It takes from Twitter users’ tweets<br>and renders them in VR.</li>\n</ol>\n<h2 id=\"Portfolio\"><a href=\"#Portfolio\" class=\"headerlink\" title=\"Portfolio\"></a>Portfolio</h2><p>When I wrote my last blog entry, I was working on building my portfolio! Here it is:</p>\n<p><a href=\"https://chanceeakin.io\" target=\"_blank\" rel=\"noopener\">My Portfolio</a></p>\n<p>A non-exhaustive list of the tech I used:</p>\n<ul>\n<li>React MD (The view library upon which this is based)</li>\n<li>Let’s Encrypt for HTTPS encryption</li>\n<li>The usual suspects and buzzwords</li>\n</ul>\n<p>I’m a huge fan of minimal, archetypal design. Material Design in particular. So when I found out that there was a React/Redux port of Google’s flagship Design paradigm, I had to jump on it! It’s a great way to learn and quickly iterate using sound design principles, as well as play with some exciting Javascript technology. Let’s dig in:</p>\n<h4 id=\"The-Business\"><a href=\"#The-Business\" class=\"headerlink\" title=\"The Business\"></a>The Business</h4><p>React MD is built in Javascript, namely ES6, and it takes advantage of the newer parts of the language. It also incorporates most of the cooler stuff about Redux: functional programming, modular code, etc.  The semantic organization of stylesheets wth container components is awesome, and adds for some painless visual grepping. All in all, a really cool set of tools. A set of tools I really didn’t know how to use, until I built the thing. Hell, I still wonder if I actually know React/Redux.</p>\n<p>The big pain point was when I made a redux cycle for checking window size. I wanted a different nav menu based on window width. In order to do that, I had to create an action, make it some reducers, hook it into the store. You know, Redux it up. The underlying cause of difficulty for me was application state (which differs substantially from react’s state). Application state is the data your application uses data over time. I think we underemphasize the difficulty of understanding that concept, so here’s my attempt at it.</p>\n<p>Have you ever watched Interstellar? (SPOILER) Assuming you have, in the scene where Matt’s character is in the dimensional representation of time (aka, the tesseract), he interacts with different snapshots of his daughter’s room. Same room, different time. This is application state. Our data is like the dust, the books, the watch. We use some functions to move the data. The room stays the same. It’s the only representation that makes sense to me. We use all the collected actions, reducers, and stores to create new snapshots of time. Without the snappy robot.</p>\n<p>Once I figured out application state, a lot of the underly React/Redux infrastructure clicked, and voilà! A working, resizable menu.</p>\n<h2 id=\"My-VR-application\"><a href=\"#My-VR-application\" class=\"headerlink\" title=\"My VR application\"></a>My VR application</h2><p>My best friend from highschool is now a high school economics teacher, so I’m headed to speak to some kids in a week or two about code and about life. I thought that while I’m there, I could show them something fun. Since I’d been meaning to work with AframeVR, here’s a follow up from earlier.</p>\n<h4 id=\"The-Business-1\"><a href=\"#The-Business-1\" class=\"headerlink\" title=\"The Business\"></a>The Business</h4><p>It got more difficult when I started using and building Aframe components. Aframe is fantastic, but it has some limitations–if only in terms of what it offers out of the box. In order to expand the power of the VR wrapper, it helps to know some three.js. In this case, I didn’t have a grid component, so I wrote one. It was a wrapper to initialize a three.js element, like so:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> AFRAME === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Component attempted to register before AFRAME was available.'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AFRAME.registerComponent(<span class=\"string\">'trongrid'</span>, &#123;</span><br><span class=\"line\">  schema: &#123;</span><br><span class=\"line\">    size: &#123;<span class=\"attr\">default</span>: <span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">    divisions: &#123;<span class=\"attr\">default</span>: <span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">    colorCenterLine: &#123;<span class=\"attr\">default</span>: <span class=\"string\">'#bada55'</span>&#125;,</span><br><span class=\"line\">    colorGrid: &#123;<span class=\"attr\">default</span>: <span class=\"string\">'#bada55'</span>&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scene = <span class=\"keyword\">this</span>.el.object3D</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    <span class=\"comment\">/* populates the three.js layer with registered data or defaults from schema. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.GridHelper(data.size, data.divisions, data.colorCenterLine, data.colorGrid)</span><br><span class=\"line\">    scene.add(geometry)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  remove: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scene = <span class=\"keyword\">this</span>.el.object3D</span><br><span class=\"line\">    scene.remove(scene.getObjectByName(<span class=\"string\">'trongrid'</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Fun, right? The first few lines check for Aframe, and the <code>registerComponent</code> portion creates a composable grid element. I wanted it to look like Tron, dammit. Here’s where things get fun. React adds an extra layer of difficulty to implementing Aframe successfully, mostly because of how node modules need to imported. As it turns out, someone else wrote a better (ie, already published) npm package for an <code>aframe-gridhelper-component</code>, so I used that one instead. All that work for <del>nothing</del> learning. The crux of the matter: I couldn’t get the component to change color. When working with React, the syntax for dealing with <code>&lt;a-entity&gt;</code> becomes <code>&lt;Entity /&gt;</code>, among others. Here’s what I mean.</p>\n<h5 id=\"Vanilla-Aframe\"><a href=\"#Vanilla-Aframe\" class=\"headerlink\" title=\"Vanilla Aframe\"></a>Vanilla Aframe</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-entity</span> <span class=\"attr\">gridhelper</span>=<span class=\"string\">\"size: 100; divisions: 100; colorCenterLine: black; colorGrid: black;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a-entity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"React-Aframe\"><a href=\"#React-Aframe\" class=\"headerlink\" title=\"React Aframe\"></a>React Aframe</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Entity</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">gridhelper</span>=<span class=\"string\">&#123;&#123;size:</span> <span class=\"attr\">100</span>, <span class=\"attr\">divisions:</span> <span class=\"attr\">100</span>, <span class=\"attr\">colorCenterLine:</span> \"<span class=\"attr\">rgb</span>(<span class=\"attr\">90</span>, <span class=\"attr\">229</span>, <span class=\"attr\">252</span>)\", <span class=\"attr\">colorGrid:</span> \"<span class=\"attr\">rgb</span>(<span class=\"attr\">90</span>, <span class=\"attr\">229</span>, <span class=\"attr\">252</span>)\"&#125;&#125;</span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>See the difference? I don’t want to tell you how long that little distinction took me to figure out. Hint: not. short. After fighting with Webpack to proxy my API server layer into the fun, the whole thing went off smoothly! <a href=\"https://github.com/chanceeakin/vr-data-visualizer\" target=\"_blank\" rel=\"noopener\">Repo is here: vr-data-visualizer</a>.</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>Easter’s coming up soon, and incidentally, I’ve been training for a Tough Mudder in May! Stay tuned for pictures!</p>\n"},{"title":"February 2018","date":"2018-02-04T03:40:21.000Z","comments":1,"subtitle":"A good day","cover_index":"../images/luca-bravo-small.jpg","_content":"\nI've found that I spend more time doing things than I do writing about them. Here's a catch up.\n\n## In a Nutshell:\n\n  * Joined a new company. (What up, [Maidbot!](http://maidbot.com))\n  * Began building with GraphQL...\n  * GoLang\n  * Python/openCV\n  * Ran a Tough Mudder\n  * Kept working at the Farm\n\n## Pertinent Github Links\n\n  * [Magic Mirror](https://github.com/chanceeakin/magic-mirror)\n  * [Face Detection!](https://github.com/chanceeakin/chrisify)\n  * [My React Boilerplate](https://github.com/chanceeakin/react-build/)\n\n## Updates\n\nIt's been crazy, y'all. I've had a lot of fun writing a lot of code, building some cool projects, and living my life.\n\n### Tough Mudder\n\nLast spring, I trained for (and RAN!) my first Tough Mudder. It was...less difficult than I had anticipated. It's amazing what happens when you put in the requisite amount of time. Not even excelling, but showing up every day and doing a little bit more than the minimum. I was able to run a sub three hour tough mudder thanks to that work. Nothing fancy about it. A lot of grinding and running for distance and less than stellar mile splits. Really ugly times, if we're being honest (9-10 minutes...look, it's fine). Luckily, I have the advantage of not being a runner. I'm built for heavy weights, short distances, and power. The Tough Mudder plays into enough of those strengths that I _almost_ didn't mind the ten plus miles involved in running the darn thing. But hey, I did the thing, and sometimes, that's what counts.\n\nIn case you were wondering, this is one of those times.\n\n### Magic Mirror\n\nSo, aside from my VR experiments, I've spent a fair amount of time tinkering with OpenCV, GoLang, and [Magic Mirror](https://magicmirror.builders/) building. It's a fantastic ecosystem for Node development, including a myriad of customizable modules and a semi-active community. My challenge for myself was to build a face detecting Magic-Mirror, and upon successful detection: load my calendar. I've succeeded in writing most of the software, but I have yet to build the physical mirror! That part's easy, truth be told. Writing a GraphQL server in Go and linking it to a separate Node App...then compiling that code on a Raspberry Pi? That was the real challenge.\n\nI'm _almost_ done with the software, specifically saving and persisting OAuth tokens for given users, as well as linking them with the facial detection training model. That turned out to be *way* harder than I thought it would be. I had originally wanted to build the project take n possible users, but with the current limitations of my software...10 users is the theoretical max value for a given mirror. Not bad, considering I might have 10 people over a year. So, I have manually trained facial recognition models and manually saved OAuth tokens. It's a bit of (read: complete) mess, but it works!\n\n### Grateful\n\nThree years ago, I was destitute and without a plan. On the cusp of finishing a doctorate with no plans afterward. I walked away from a career in the opera world for something--anything--different. Fortunately, I found what I was looking for.\n\n~~At first, my life was a mess.~~ Who am I kidding? My life is consistently a mess, with brief respites of clarity and occasional understanding. (I think we kid ourselves with how well we do, the accomplishments, the accolades we chase. I've began a different sort of chase: namely, the chase of knowledge and study, but that's for another post). Since then, I've changed gears, learned enough about code to be hireable, and have since grown myself in avenues I denied myself in the pursuit of elite singing. No one ever tells you about what happens as you chase pinnacle achievement: the long, tireless hours, the mundane's coexistence with spectacular. It is an odd life. Rather than try to recreate those extremes in my life, I've been in pursuit of balance: life, career, body, and everything in between.\n\nToday, I took a break. I spent all day today learning new technologies, purely because I wanted to learn them. Docker is a fantastic technology, by the way. Once you get past the frustration of trying to get a MySQL container to both seed, persist, and network with other containers, that is. I did that because...I haven't blown off a day on something I wanted to do in months. It's been glorious. Don't know when I'll get another one, so I figured that I would capitalize while I could!\n\nLife continues to fulfil in ways I never expected.\n\nUntil next time friends. In the meantime, I'll be tinkering with Go/OpenCV and finding simple joys.\n","source":"_posts/feb-2018.md","raw":"---\ntitle: February 2018\ndate: 2018-02-03 21:40:21\ntags:\n  - life\n  - raspberry pi\n  - openCV\ncomments: true\nsubtitle: A good day\ncover_index: ../images/luca-bravo-small.jpg\n---\n\nI've found that I spend more time doing things than I do writing about them. Here's a catch up.\n\n## In a Nutshell:\n\n  * Joined a new company. (What up, [Maidbot!](http://maidbot.com))\n  * Began building with GraphQL...\n  * GoLang\n  * Python/openCV\n  * Ran a Tough Mudder\n  * Kept working at the Farm\n\n## Pertinent Github Links\n\n  * [Magic Mirror](https://github.com/chanceeakin/magic-mirror)\n  * [Face Detection!](https://github.com/chanceeakin/chrisify)\n  * [My React Boilerplate](https://github.com/chanceeakin/react-build/)\n\n## Updates\n\nIt's been crazy, y'all. I've had a lot of fun writing a lot of code, building some cool projects, and living my life.\n\n### Tough Mudder\n\nLast spring, I trained for (and RAN!) my first Tough Mudder. It was...less difficult than I had anticipated. It's amazing what happens when you put in the requisite amount of time. Not even excelling, but showing up every day and doing a little bit more than the minimum. I was able to run a sub three hour tough mudder thanks to that work. Nothing fancy about it. A lot of grinding and running for distance and less than stellar mile splits. Really ugly times, if we're being honest (9-10 minutes...look, it's fine). Luckily, I have the advantage of not being a runner. I'm built for heavy weights, short distances, and power. The Tough Mudder plays into enough of those strengths that I _almost_ didn't mind the ten plus miles involved in running the darn thing. But hey, I did the thing, and sometimes, that's what counts.\n\nIn case you were wondering, this is one of those times.\n\n### Magic Mirror\n\nSo, aside from my VR experiments, I've spent a fair amount of time tinkering with OpenCV, GoLang, and [Magic Mirror](https://magicmirror.builders/) building. It's a fantastic ecosystem for Node development, including a myriad of customizable modules and a semi-active community. My challenge for myself was to build a face detecting Magic-Mirror, and upon successful detection: load my calendar. I've succeeded in writing most of the software, but I have yet to build the physical mirror! That part's easy, truth be told. Writing a GraphQL server in Go and linking it to a separate Node App...then compiling that code on a Raspberry Pi? That was the real challenge.\n\nI'm _almost_ done with the software, specifically saving and persisting OAuth tokens for given users, as well as linking them with the facial detection training model. That turned out to be *way* harder than I thought it would be. I had originally wanted to build the project take n possible users, but with the current limitations of my software...10 users is the theoretical max value for a given mirror. Not bad, considering I might have 10 people over a year. So, I have manually trained facial recognition models and manually saved OAuth tokens. It's a bit of (read: complete) mess, but it works!\n\n### Grateful\n\nThree years ago, I was destitute and without a plan. On the cusp of finishing a doctorate with no plans afterward. I walked away from a career in the opera world for something--anything--different. Fortunately, I found what I was looking for.\n\n~~At first, my life was a mess.~~ Who am I kidding? My life is consistently a mess, with brief respites of clarity and occasional understanding. (I think we kid ourselves with how well we do, the accomplishments, the accolades we chase. I've began a different sort of chase: namely, the chase of knowledge and study, but that's for another post). Since then, I've changed gears, learned enough about code to be hireable, and have since grown myself in avenues I denied myself in the pursuit of elite singing. No one ever tells you about what happens as you chase pinnacle achievement: the long, tireless hours, the mundane's coexistence with spectacular. It is an odd life. Rather than try to recreate those extremes in my life, I've been in pursuit of balance: life, career, body, and everything in between.\n\nToday, I took a break. I spent all day today learning new technologies, purely because I wanted to learn them. Docker is a fantastic technology, by the way. Once you get past the frustration of trying to get a MySQL container to both seed, persist, and network with other containers, that is. I did that because...I haven't blown off a day on something I wanted to do in months. It's been glorious. Don't know when I'll get another one, so I figured that I would capitalize while I could!\n\nLife continues to fulfil in ways I never expected.\n\nUntil next time friends. In the meantime, I'll be tinkering with Go/OpenCV and finding simple joys.\n","slug":"feb-2018","published":1,"updated":"2018-02-04T05:04:24.376Z","_id":"cjd8923fh0004snuajfm2cr9s","layout":"post","photos":[],"link":"","content":"<p>I’ve found that I spend more time doing things than I do writing about them. Here’s a catch up.</p>\n<h2 id=\"In-a-Nutshell\"><a href=\"#In-a-Nutshell\" class=\"headerlink\" title=\"In a Nutshell:\"></a>In a Nutshell:</h2><ul>\n<li>Joined a new company. (What up, <a href=\"http://maidbot.com\" target=\"_blank\" rel=\"noopener\">Maidbot!</a>)</li>\n<li>Began building with GraphQL…</li>\n<li>GoLang</li>\n<li>Python/openCV</li>\n<li>Ran a Tough Mudder</li>\n<li>Kept working at the Farm</li>\n</ul>\n<h2 id=\"Pertinent-Github-Links\"><a href=\"#Pertinent-Github-Links\" class=\"headerlink\" title=\"Pertinent Github Links\"></a>Pertinent Github Links</h2><ul>\n<li><a href=\"https://github.com/chanceeakin/magic-mirror\" target=\"_blank\" rel=\"noopener\">Magic Mirror</a></li>\n<li><a href=\"https://github.com/chanceeakin/chrisify\" target=\"_blank\" rel=\"noopener\">Face Detection!</a></li>\n<li><a href=\"https://github.com/chanceeakin/react-build/\" target=\"_blank\" rel=\"noopener\">My React Boilerplate</a></li>\n</ul>\n<h2 id=\"Updates\"><a href=\"#Updates\" class=\"headerlink\" title=\"Updates\"></a>Updates</h2><p>It’s been crazy, y’all. I’ve had a lot of fun writing a lot of code, building some cool projects, and living my life.</p>\n<h3 id=\"Tough-Mudder\"><a href=\"#Tough-Mudder\" class=\"headerlink\" title=\"Tough Mudder\"></a>Tough Mudder</h3><p>Last spring, I trained for (and RAN!) my first Tough Mudder. It was…less difficult than I had anticipated. It’s amazing what happens when you put in the requisite amount of time. Not even excelling, but showing up every day and doing a little bit more than the minimum. I was able to run a sub three hour tough mudder thanks to that work. Nothing fancy about it. A lot of grinding and running for distance and less than stellar mile splits. Really ugly times, if we’re being honest (9-10 minutes…look, it’s fine). Luckily, I have the advantage of not being a runner. I’m built for heavy weights, short distances, and power. The Tough Mudder plays into enough of those strengths that I <em>almost</em> didn’t mind the ten plus miles involved in running the darn thing. But hey, I did the thing, and sometimes, that’s what counts.</p>\n<p>In case you were wondering, this is one of those times.</p>\n<h3 id=\"Magic-Mirror\"><a href=\"#Magic-Mirror\" class=\"headerlink\" title=\"Magic Mirror\"></a>Magic Mirror</h3><p>So, aside from my VR experiments, I’ve spent a fair amount of time tinkering with OpenCV, GoLang, and <a href=\"https://magicmirror.builders/\" target=\"_blank\" rel=\"noopener\">Magic Mirror</a> building. It’s a fantastic ecosystem for Node development, including a myriad of customizable modules and a semi-active community. My challenge for myself was to build a face detecting Magic-Mirror, and upon successful detection: load my calendar. I’ve succeeded in writing most of the software, but I have yet to build the physical mirror! That part’s easy, truth be told. Writing a GraphQL server in Go and linking it to a separate Node App…then compiling that code on a Raspberry Pi? That was the real challenge.</p>\n<p>I’m <em>almost</em> done with the software, specifically saving and persisting OAuth tokens for given users, as well as linking them with the facial detection training model. That turned out to be <em>way</em> harder than I thought it would be. I had originally wanted to build the project take n possible users, but with the current limitations of my software…10 users is the theoretical max value for a given mirror. Not bad, considering I might have 10 people over a year. So, I have manually trained facial recognition models and manually saved OAuth tokens. It’s a bit of (read: complete) mess, but it works!</p>\n<h3 id=\"Grateful\"><a href=\"#Grateful\" class=\"headerlink\" title=\"Grateful\"></a>Grateful</h3><p>Three years ago, I was destitute and without a plan. On the cusp of finishing a doctorate with no plans afterward. I walked away from a career in the opera world for something–anything–different. Fortunately, I found what I was looking for.</p>\n<p><del>At first, my life was a mess.</del> Who am I kidding? My life is consistently a mess, with brief respites of clarity and occasional understanding. (I think we kid ourselves with how well we do, the accomplishments, the accolades we chase. I’ve began a different sort of chase: namely, the chase of knowledge and study, but that’s for another post). Since then, I’ve changed gears, learned enough about code to be hireable, and have since grown myself in avenues I denied myself in the pursuit of elite singing. No one ever tells you about what happens as you chase pinnacle achievement: the long, tireless hours, the mundane’s coexistence with spectacular. It is an odd life. Rather than try to recreate those extremes in my life, I’ve been in pursuit of balance: life, career, body, and everything in between.</p>\n<p>Today, I took a break. I spent all day today learning new technologies, purely because I wanted to learn them. Docker is a fantastic technology, by the way. Once you get past the frustration of trying to get a MySQL container to both seed, persist, and network with other containers, that is. I did that because…I haven’t blown off a day on something I wanted to do in months. It’s been glorious. Don’t know when I’ll get another one, so I figured that I would capitalize while I could!</p>\n<p>Life continues to fulfil in ways I never expected.</p>\n<p>Until next time friends. In the meantime, I’ll be tinkering with Go/OpenCV and finding simple joys.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’ve found that I spend more time doing things than I do writing about them. Here’s a catch up.</p>\n<h2 id=\"In-a-Nutshell\"><a href=\"#In-a-Nutshell\" class=\"headerlink\" title=\"In a Nutshell:\"></a>In a Nutshell:</h2><ul>\n<li>Joined a new company. (What up, <a href=\"http://maidbot.com\" target=\"_blank\" rel=\"noopener\">Maidbot!</a>)</li>\n<li>Began building with GraphQL…</li>\n<li>GoLang</li>\n<li>Python/openCV</li>\n<li>Ran a Tough Mudder</li>\n<li>Kept working at the Farm</li>\n</ul>\n<h2 id=\"Pertinent-Github-Links\"><a href=\"#Pertinent-Github-Links\" class=\"headerlink\" title=\"Pertinent Github Links\"></a>Pertinent Github Links</h2><ul>\n<li><a href=\"https://github.com/chanceeakin/magic-mirror\" target=\"_blank\" rel=\"noopener\">Magic Mirror</a></li>\n<li><a href=\"https://github.com/chanceeakin/chrisify\" target=\"_blank\" rel=\"noopener\">Face Detection!</a></li>\n<li><a href=\"https://github.com/chanceeakin/react-build/\" target=\"_blank\" rel=\"noopener\">My React Boilerplate</a></li>\n</ul>\n<h2 id=\"Updates\"><a href=\"#Updates\" class=\"headerlink\" title=\"Updates\"></a>Updates</h2><p>It’s been crazy, y’all. I’ve had a lot of fun writing a lot of code, building some cool projects, and living my life.</p>\n<h3 id=\"Tough-Mudder\"><a href=\"#Tough-Mudder\" class=\"headerlink\" title=\"Tough Mudder\"></a>Tough Mudder</h3><p>Last spring, I trained for (and RAN!) my first Tough Mudder. It was…less difficult than I had anticipated. It’s amazing what happens when you put in the requisite amount of time. Not even excelling, but showing up every day and doing a little bit more than the minimum. I was able to run a sub three hour tough mudder thanks to that work. Nothing fancy about it. A lot of grinding and running for distance and less than stellar mile splits. Really ugly times, if we’re being honest (9-10 minutes…look, it’s fine). Luckily, I have the advantage of not being a runner. I’m built for heavy weights, short distances, and power. The Tough Mudder plays into enough of those strengths that I <em>almost</em> didn’t mind the ten plus miles involved in running the darn thing. But hey, I did the thing, and sometimes, that’s what counts.</p>\n<p>In case you were wondering, this is one of those times.</p>\n<h3 id=\"Magic-Mirror\"><a href=\"#Magic-Mirror\" class=\"headerlink\" title=\"Magic Mirror\"></a>Magic Mirror</h3><p>So, aside from my VR experiments, I’ve spent a fair amount of time tinkering with OpenCV, GoLang, and <a href=\"https://magicmirror.builders/\" target=\"_blank\" rel=\"noopener\">Magic Mirror</a> building. It’s a fantastic ecosystem for Node development, including a myriad of customizable modules and a semi-active community. My challenge for myself was to build a face detecting Magic-Mirror, and upon successful detection: load my calendar. I’ve succeeded in writing most of the software, but I have yet to build the physical mirror! That part’s easy, truth be told. Writing a GraphQL server in Go and linking it to a separate Node App…then compiling that code on a Raspberry Pi? That was the real challenge.</p>\n<p>I’m <em>almost</em> done with the software, specifically saving and persisting OAuth tokens for given users, as well as linking them with the facial detection training model. That turned out to be <em>way</em> harder than I thought it would be. I had originally wanted to build the project take n possible users, but with the current limitations of my software…10 users is the theoretical max value for a given mirror. Not bad, considering I might have 10 people over a year. So, I have manually trained facial recognition models and manually saved OAuth tokens. It’s a bit of (read: complete) mess, but it works!</p>\n<h3 id=\"Grateful\"><a href=\"#Grateful\" class=\"headerlink\" title=\"Grateful\"></a>Grateful</h3><p>Three years ago, I was destitute and without a plan. On the cusp of finishing a doctorate with no plans afterward. I walked away from a career in the opera world for something–anything–different. Fortunately, I found what I was looking for.</p>\n<p><del>At first, my life was a mess.</del> Who am I kidding? My life is consistently a mess, with brief respites of clarity and occasional understanding. (I think we kid ourselves with how well we do, the accomplishments, the accolades we chase. I’ve began a different sort of chase: namely, the chase of knowledge and study, but that’s for another post). Since then, I’ve changed gears, learned enough about code to be hireable, and have since grown myself in avenues I denied myself in the pursuit of elite singing. No one ever tells you about what happens as you chase pinnacle achievement: the long, tireless hours, the mundane’s coexistence with spectacular. It is an odd life. Rather than try to recreate those extremes in my life, I’ve been in pursuit of balance: life, career, body, and everything in between.</p>\n<p>Today, I took a break. I spent all day today learning new technologies, purely because I wanted to learn them. Docker is a fantastic technology, by the way. Once you get past the frustration of trying to get a MySQL container to both seed, persist, and network with other containers, that is. I did that because…I haven’t blown off a day on something I wanted to do in months. It’s been glorious. Don’t know when I’ll get another one, so I figured that I would capitalize while I could!</p>\n<p>Life continues to fulfil in ways I never expected.</p>\n<p>Until next time friends. In the meantime, I’ll be tinkering with Go/OpenCV and finding simple joys.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjd8923fc0001snua0y8ak8hb","tag_id":"cjd8923ff0003snuasmsnxk5h","_id":"cjd8923fk0006snua9w1y5wwg"},{"post_id":"cjd8923fh0004snuajfm2cr9s","tag_id":"cjd8923ff0003snuasmsnxk5h","_id":"cjd89w2j80002tnuaxaoqfrwu"},{"post_id":"cjd8923fh0004snuajfm2cr9s","tag_id":"cjd89w2j70000tnuaqcn5jthj","_id":"cjd89w2j80003tnuaeb608p6h"},{"post_id":"cjd8923fh0004snuajfm2cr9s","tag_id":"cjd89w2j70001tnuacz9m50ib","_id":"cjd89w2j80004tnuayc9nkb5t"}],"Tag":[{"name":"life","_id":"cjd8923ff0003snuasmsnxk5h"},{"name":"life, raspberrypi","_id":"cjd8923fj0005snuaz6bw76bk"},{"name":"life, raspberrypi, opencv","_id":"cjd892vi80008snua2nooeb47"},{"name":"life; raspberrypi; opencv","_id":"cjd89up660000nyuaklu4ecaz"},{"name":"raspberry pi","_id":"cjd89w2j70000tnuaqcn5jthj"},{"name":"openCV","_id":"cjd89w2j70001tnuacz9m50ib"}]}}